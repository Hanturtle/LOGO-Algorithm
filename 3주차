#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int n, k, l;
vector<vector<char>> map(105, vector<char>(105));
queue<pair<int, char>> dir;
//*****************************************
//벽 또는 자기자신의 몸과 부딪히면 게임오버
//사과를 먹으면 몸 길이 증가
//*****************************************
int main() {
	scanf("%d", &n);	//맵 생성(n * n의 정사각형)
	scanf("%d", &k);	//사과 위치('true')
	for (int i = 0; i < k; i++) {
		int col, row;
		scanf("%d %d", &col, &row);
		map[col][row] = 'A';	
	}
	scanf("%d", &l);	//방향정보: dir = { 시간, 방향 } D : 오른쪽/ L : 왼쪽
	for (int i = 0; i < l; i++) {
		int sec; char d;
		scanf("%d %c", &sec, &d);
		dir.push({ sec, d });
	}
	dir.push({ 10005, 'D' });
	deque<pair<int, int>> b;
	b.push_back({ 1, 1 });
    int a[2] = { 0, 1 };
	int x, y, nx, ny, time = 0;
	while (!dir.empty()) {
		pair<int, char> d = dir.front();
		for (int i = time; i < d.first; i++) {
			x = b.front().second, y = b.front().first;
			map[y][x] = 'x';
			nx = x + a[1], ny = y + a[0];
			//벽에 닿았을 때
			if (nx <1 || nx > n || ny < 1 || ny > n || map[ny][nx] == 'x') {
				printf("%d", time + 1);
				return 0;
			}
			//자기 자신과 닿았을 때
			for (int i = 1; i < b.size(); i++) {
				if (b[i].first == ny && b[i].second == nx) {
					printf("%d", time + 1);
					return 0;
				}
			}
			b.push_front({ ny, nx });
			//사과를 먹었을 때
			if (map[ny][nx] != 'A') {
				map[b.back().first][b.back().second] = ' ';
				b.pop_back();
			}
			time++;	//한 칸 이동
		}
		//방향전환
		int tmp = a[0];
		if (a[0] == 0) {
			if (d.second == 'D') {
				a[0] = a[1]; a[1] = tmp;
			}
			else {
				a[0] = -1 * a[1]; a[1] = tmp;
			}
		}
		else {
			if (d.second == 'D') {
				a[0] = a[1]; a[1] = -1 * tmp;
			}
			else {
				a[0] = a[1]; a[1] = tmp;
			}
		}
		dir.pop();
	}
	printf("%d", time);
}
